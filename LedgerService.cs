using System;
using System.Threading.Tasks;
using Grpc.Net.Client;
using HyperledgerFabricLedger.Services;
using Protos; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã

namespace HyperledgerFabricLedger.Services
{
    public class LedgerService
    {
        private readonly string _peerAddress;

        public LedgerService(string peerAddress)
        {
            _peerAddress = peerAddress;
        }
        
        public async Task<string> TestConnection()
        {
            try
            {
                using var channel = GrpcChannel.ForAddress($"http://{_peerAddress}");
                var client = new Endorser.EndorserClient(channel); // gRPC-–∫–ª–∏–µ–Ω—Ç –¥–ª—è Peer API

                Console.WriteLine($"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {_peerAddress}");
                return "OK";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
                return "ERROR";
            }
        }

        public async Task<string> WriteToLedger(string key, string value)
        {
            Console.WriteLine($"üìù –ó–∞–ø–∏—Å—å –≤ Ledger —á–µ—Ä–µ–∑ gRPC: {key} -> {value}");

            using var channel = GrpcChannel.ForAddress($"http://{_peerAddress}");
            var client = new Endorser.EndorserClient(channel);

            var proposal = new SignedProposal(); // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            var response = await client.ProcessProposalAsync(proposal);

            return response.Response.Status == 200 ? "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!" : "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏!";
        }
    }
}